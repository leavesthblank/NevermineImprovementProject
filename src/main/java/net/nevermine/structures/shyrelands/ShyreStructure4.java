package net.nevermine.structures.shyrelands;

import net.minecraft.block.Block;
import net.nevermine.izer.Blockizer;
import net.nevermine.structures.voxponds.IVoxpondsStructure;

public class ShyreStructure4 implements IVoxpondsStructure {
	public void generate(Block[][][] chunk, int i, int j, int k) {
		chunk[(i + 0)][(j + 0)][(k + 0)] = Blockizer.ShyreWall;
		chunk[(i + 0)][(j + 0)][(k + 1)] = Blockizer.ShyreWallWhite;
		chunk[(i + 0)][(j + 0)][(k + 2)] = Blockizer.ShyreWallWhite;
		chunk[(i + 0)][(j + 0)][(k + 3)] = Blockizer.ShyreWallWhite;
		chunk[(i + 0)][(j + 0)][(k + 4)] = Blockizer.ShyreWall;
		chunk[(i + 0)][(j + 0)][(k + 9)] = Blockizer.ShyreWall;
		chunk[(i + 0)][(j + 0)][(k + 10)] = Blockizer.ShyreWallWhite;
		chunk[(i + 0)][(j + 0)][(k + 11)] = Blockizer.ShyreWallWhite;
		chunk[(i + 0)][(j + 0)][(k + 12)] = Blockizer.ShyreWallWhite;
		chunk[(i + 0)][(j + 0)][(k + 13)] = Blockizer.ShyreWall;
		chunk[(i + 1)][(j + 0)][(k + 0)] = Blockizer.ShyreWallWhite;
		chunk[(i + 1)][(j + 0)][(k + 13)] = Blockizer.ShyreWallWhite;
		chunk[(i + 2)][(j + 0)][(k + 0)] = Blockizer.ShyreWallWhite;
		chunk[(i + 2)][(j + 0)][(k + 2)] = Blockizer.ShyreWood;
		chunk[(i + 2)][(j + 0)][(k + 11)] = Blockizer.ShyreWood;
		chunk[(i + 2)][(j + 0)][(k + 13)] = Blockizer.ShyreWallWhite;
		chunk[(i + 2)][(j + 1)][(k + 2)] = Blockizer.ShyreWood;
		chunk[(i + 2)][(j + 1)][(k + 11)] = Blockizer.ShyreWood;
		chunk[(i + 2)][(j + 2)][(k + 2)] = Blockizer.ShyreWood;
		chunk[(i + 2)][(j + 2)][(k + 11)] = Blockizer.ShyreWood;
		chunk[(i + 2)][(j + 3)][(k + 2)] = Blockizer.ShyreWood;
		chunk[(i + 2)][(j + 3)][(k + 11)] = Blockizer.ShyreWood;
		chunk[(i + 2)][(j + 4)][(k + 2)] = Blockizer.ShyreLeaves;
		chunk[(i + 2)][(j + 4)][(k + 11)] = Blockizer.ShyreLeaves;
		chunk[(i + 3)][(j + 0)][(k + 0)] = Blockizer.ShyreWallWhite;
		chunk[(i + 3)][(j + 0)][(k + 13)] = Blockizer.ShyreWallWhite;
		chunk[(i + 4)][(j + 0)][(k + 0)] = Blockizer.ShyreWall;
		chunk[(i + 4)][(j + 0)][(k + 4)] = Blockizer.ShyreWood;
		chunk[(i + 4)][(j + 0)][(k + 9)] = Blockizer.ShyreWood;
		chunk[(i + 4)][(j + 0)][(k + 13)] = Blockizer.ShyreWall;
		chunk[(i + 4)][(j + 1)][(k + 4)] = Blockizer.ShyreWood;
		chunk[(i + 4)][(j + 1)][(k + 9)] = Blockizer.ShyreWood;
		chunk[(i + 4)][(j + 2)][(k + 4)] = Blockizer.ShyreWood;
		chunk[(i + 4)][(j + 2)][(k + 9)] = Blockizer.ShyreWood;
		chunk[(i + 4)][(j + 3)][(k + 4)] = Blockizer.ShyreLeaves;
		chunk[(i + 4)][(j + 3)][(k + 9)] = Blockizer.ShyreLeaves;
		chunk[(i + 6)][(j + 0)][(k + 6)] = Blockizer.StrangeBlock;
		chunk[(i + 6)][(j + 0)][(k + 7)] = Blockizer.StrangeBlock;
		chunk[(i + 7)][(j + 0)][(k + 6)] = Blockizer.StrangeBlock;
		chunk[(i + 7)][(j + 0)][(k + 7)] = Blockizer.StrangeBlock;
		chunk[(i + 9)][(j + 0)][(k + 0)] = Blockizer.ShyreWall;
		chunk[(i + 9)][(j + 0)][(k + 4)] = Blockizer.ShyreWood;
		chunk[(i + 9)][(j + 0)][(k + 9)] = Blockizer.ShyreWood;
		chunk[(i + 9)][(j + 0)][(k + 13)] = Blockizer.ShyreWall;
		chunk[(i + 9)][(j + 1)][(k + 4)] = Blockizer.ShyreWood;
		chunk[(i + 9)][(j + 1)][(k + 9)] = Blockizer.ShyreWood;
		chunk[(i + 9)][(j + 2)][(k + 4)] = Blockizer.ShyreWood;
		chunk[(i + 9)][(j + 2)][(k + 9)] = Blockizer.ShyreWood;
		chunk[(i + 9)][(j + 3)][(k + 4)] = Blockizer.ShyreLeaves;
		chunk[(i + 9)][(j + 3)][(k + 9)] = Blockizer.ShyreLeaves;
		chunk[(i + 10)][(j + 0)][(k + 0)] = Blockizer.ShyreWallWhite;
		chunk[(i + 10)][(j + 0)][(k + 13)] = Blockizer.ShyreWallWhite;
		chunk[(i + 11)][(j + 0)][(k + 0)] = Blockizer.ShyreWallWhite;
		chunk[(i + 11)][(j + 0)][(k + 2)] = Blockizer.ShyreWood;
		chunk[(i + 11)][(j + 0)][(k + 11)] = Blockizer.ShyreWood;
		chunk[(i + 11)][(j + 0)][(k + 13)] = Blockizer.ShyreWallWhite;
		chunk[(i + 11)][(j + 1)][(k + 2)] = Blockizer.ShyreWood;
		chunk[(i + 11)][(j + 1)][(k + 11)] = Blockizer.ShyreWood;
		chunk[(i + 11)][(j + 2)][(k + 2)] = Blockizer.ShyreWood;
		chunk[(i + 11)][(j + 2)][(k + 11)] = Blockizer.ShyreWood;
		chunk[(i + 11)][(j + 3)][(k + 2)] = Blockizer.ShyreWood;
		chunk[(i + 11)][(j + 3)][(k + 11)] = Blockizer.ShyreWood;
		chunk[(i + 11)][(j + 4)][(k + 2)] = Blockizer.ShyreLeaves;
		chunk[(i + 11)][(j + 4)][(k + 11)] = Blockizer.ShyreLeaves;
		chunk[(i + 12)][(j + 0)][(k + 0)] = Blockizer.ShyreWallWhite;
		chunk[(i + 12)][(j + 0)][(k + 13)] = Blockizer.ShyreWallWhite;
		chunk[(i + 13)][(j + 0)][(k + 0)] = Blockizer.ShyreWall;
		chunk[(i + 13)][(j + 0)][(k + 1)] = Blockizer.ShyreWallWhite;
		chunk[(i + 13)][(j + 0)][(k + 2)] = Blockizer.ShyreWallWhite;
		chunk[(i + 13)][(j + 0)][(k + 3)] = Blockizer.ShyreWallWhite;
		chunk[(i + 13)][(j + 0)][(k + 4)] = Blockizer.ShyreWall;
		chunk[(i + 13)][(j + 0)][(k + 9)] = Blockizer.ShyreWall;
		chunk[(i + 13)][(j + 0)][(k + 10)] = Blockizer.ShyreWallWhite;
		chunk[(i + 13)][(j + 0)][(k + 11)] = Blockizer.ShyreWallWhite;
		chunk[(i + 13)][(j + 0)][(k + 12)] = Blockizer.ShyreWallWhite;
		chunk[(i + 13)][(j + 0)][(k + 13)] = Blockizer.ShyreWall;
	}
}
